{"mappings":"A,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SCGA,IAAI,EAAkB,KAClB,EAAgB,KAEpB,MAAM,EAAU,CACd,WAAY,CAAA,EACZ,UAAW,CAAA,EACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQ,CAAa,EACnB,IAAM,EAAe,CAAa,CAAC,EAAE,AAEjC,CAAA,GADgB,IAAI,MAEtB,OAAO,KAAK,CAAC,sCACb,SAAS,aAAa,CAAC,gBAAgB,QAAQ,CAAG,CAAA,IAElD,SAAS,aAAa,CAAC,gBAAgB,QAAQ,CAAG,CAAA,EAClD,EAAkB,EAEtB,CACF,EAEA,AAAA,CAAA,EAAA,EAAA,OAAQ,AAAR,EAAU,mBAAoB,GAwD9B,SAAS,aAAa,CAAC,gBAAgB,gBAAgB,CAAC,QAAS,KAC/D,GAAI,EAAiB,KApCF,EAAA,EAqCD,EAAgB,OAAO,GApCrC,GACF,cAAc,GAGhB,EAAgB,YAAY,KAE1B,IAAM,EAAgB,EADF,IAAI,OAAO,OAAO,GAGtC,GAAI,GAAiB,EAAG,CACtB,cAAc,GACd,QAAQ,GAAG,CAAC,oBACZ,MACF,CAEA,GAAM,CAAA,KAAE,CAAI,CAAA,MAAE,CAAK,CAAA,QAAE,CAAO,CAAA,QAAE,CAAO,CAAE,CAAG,AAlC9C,SAAmB,CAAE,EAEnB,IAIM,EAAO,KAAK,KAAK,CAAC,EAFZ,OAGN,EAAQ,KAAK,KAAK,CAAE,EAHd,MADC,MAKP,EAAU,KAAK,KAAK,CAAE,EALf,KADE,KAOT,EAAU,KAAK,KAAK,CAAE,EAPb,IADA,KAef,OAJA,QAAQ,GAAG,CACT,CAAC,IAAI,EAAE,EAAG,QAAQ,EAAE,EAAK,SAAS,EAAE,EAAM,WAAW,EAAE,EAAQ,WAAW,EAAE,EAAQ,CAAC,EAGhF,CAAE,KAAA,EAAM,MAAA,EAAO,QAAA,EAAS,QAAA,CAAQ,CACzC,EAiBwD,GAGpD,QAAQ,GAAG,CAAC,CAAE,KAAA,EAAM,MAAA,EAAO,QAAA,EAAS,QAAA,CAAQ,GAE5C,SAAS,aAAa,CAAC,eAAe,WAAW,CAAG,EACjD,QAAQ,GACR,QAAQ,CAAC,EAAG,KACf,SAAS,aAAa,CAAC,gBAAgB,WAAW,CAAG,EAClD,QAAQ,GACR,QAAQ,CAAC,EAAG,KACf,SAAS,aAAa,CAAC,kBAAkB,WAAW,CAAG,EACpD,QAAQ,GACR,QAAQ,CAAC,EAAG,KACf,SAAS,aAAa,CAAC,kBAAkB,WAAW,CAAG,EACpD,QAAQ,GACR,QAAQ,CAAC,EAAG,IACjB,EAAG,KAOD,SAAS,aAAa,CAAC,gBAAgB,QAAQ,CAAG,CAAA,CACpD,CACF","sources":["<anon>","src/js/02-timer.js"],"sourcesContent":["\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $fbklV = parcelRequire(\"fbklV\");\n\nlet $40d383fb392a7037$var$selectedEndDate = null;\nlet $40d383fb392a7037$var$timerInterval = null;\nconst $40d383fb392a7037$var$options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose (selectedDates) {\n        const selectedDate = selectedDates[0];\n        const currentDate = new Date();\n        if (selectedDate <= currentDate) {\n            window.alert(\"Please choose a date in the future\");\n            document.querySelector(\"[data-start]\").disabled = true;\n        } else {\n            document.querySelector(\"[data-start]\").disabled = false;\n            $40d383fb392a7037$var$selectedEndDate = selectedDate;\n        }\n    }\n};\n(0, $fbklV.default)(\"#datetime-picker\", $40d383fb392a7037$var$options);\nfunction $40d383fb392a7037$var$convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const days = Math.floor(ms / day);\n    const hours = Math.floor(ms % day / hour);\n    const minutes = Math.floor(ms % hour / minute);\n    const seconds = Math.floor(ms % minute / second);\n    // Debugging log for calculations\n    console.log(`ms: ${ms}, days: ${days}, hours: ${hours}, minutes: ${minutes}, seconds: ${seconds}`);\n    return {\n        days: days,\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n    };\n}\nfunction $40d383fb392a7037$var$updateTimer(endTime) {\n    if ($40d383fb392a7037$var$timerInterval) clearInterval($40d383fb392a7037$var$timerInterval); // Clear the existing interval\n    $40d383fb392a7037$var$timerInterval = setInterval(()=>{\n        const currentTime = new Date().getTime();\n        const timeRemaining = endTime - currentTime;\n        if (timeRemaining <= 0) {\n            clearInterval($40d383fb392a7037$var$timerInterval);\n            console.log(\"Timer has ended!\");\n            return;\n        }\n        const { days: days, hours: hours, minutes: minutes, seconds: seconds } = $40d383fb392a7037$var$convertMs(timeRemaining);\n        // Log the values for debugging\n        console.log({\n            days: days,\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds\n        });\n        document.querySelector(\"[data-days]\").textContent = days.toString().padStart(2, \"0\");\n        document.querySelector(\"[data-hours]\").textContent = hours.toString().padStart(2, \"0\");\n        document.querySelector(\"[data-minutes]\").textContent = minutes.toString().padStart(2, \"0\");\n        document.querySelector(\"[data-seconds]\").textContent = seconds.toString().padStart(2, \"0\");\n    }, 1000); // Update every second\n}\ndocument.querySelector(\"[data-start]\").addEventListener(\"click\", ()=>{\n    if ($40d383fb392a7037$var$selectedEndDate) {\n        const endTime = $40d383fb392a7037$var$selectedEndDate.getTime();\n        $40d383fb392a7037$var$updateTimer(endTime);\n        document.querySelector(\"[data-start]\").disabled = true;\n    }\n});\n\n\n//# sourceMappingURL=02-timer.6e4afa98.js.map\n","import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nlet selectedEndDate = null;\nlet timerInterval = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (selectedDate <= currentDate) {\n      window.alert('Please choose a date in the future');\n      document.querySelector('[data-start]').disabled = true;\n    } else {\n      document.querySelector('[data-start]').disabled = false;\n      selectedEndDate = selectedDate;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  // Debugging log for calculations\n  console.log(\n    `ms: ${ms}, days: ${days}, hours: ${hours}, minutes: ${minutes}, seconds: ${seconds}`\n  );\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer(endTime) {\n  if (timerInterval) {\n    clearInterval(timerInterval); // Clear the existing interval\n  }\n\n  timerInterval = setInterval(() => {\n    const currentTime = new Date().getTime();\n    const timeRemaining = endTime - currentTime;\n\n    if (timeRemaining <= 0) {\n      clearInterval(timerInterval);\n      console.log('Timer has ended!');\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n\n    // Log the values for debugging\n    console.log({ days, hours, minutes, seconds });\n\n    document.querySelector('[data-days]').textContent = days\n      .toString()\n      .padStart(2, '0');\n    document.querySelector('[data-hours]').textContent = hours\n      .toString()\n      .padStart(2, '0');\n    document.querySelector('[data-minutes]').textContent = minutes\n      .toString()\n      .padStart(2, '0');\n    document.querySelector('[data-seconds]').textContent = seconds\n      .toString()\n      .padStart(2, '0');\n  }, 1000); // Update every second\n}\n\ndocument.querySelector('[data-start]').addEventListener('click', () => {\n  if (selectedEndDate) {\n    const endTime = selectedEndDate.getTime();\n    updateTimer(endTime);\n    document.querySelector('[data-start]').disabled = true;\n  }\n});\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$fbklV","$40d383fb392a7037$var$selectedEndDate","$40d383fb392a7037$var$timerInterval","$40d383fb392a7037$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","selectedDate","alert","document","querySelector","disabled","default","addEventListener","endTime","getTime","clearInterval","setInterval","timeRemaining","console","log","days","hours","minutes","seconds","$40d383fb392a7037$var$convertMs","ms","Math","floor","hour","minute","second","textContent","toString","padStart"],"version":3,"file":"02-timer.6e4afa98.js.map"}